#!/bin/bash
set -e

# include dot-files (if present) when coping into mounted volumes
shopt -s dotglob

## a nice tidy linecounter and echo response to keep things clean.
function change_count() {
	read LINECOUNT && echo "[Info] There were $LINECOUNT changes made."
}

function test_perm() {
	## test octal permissions and assert them if they're wrong.
	if [ ! $(stat -a $1) = $2 ]; then
		echo "[Warn] $1 was not set to have the correct permissions $2"
		echo "[RUN] chmod $2 $1"
		chmod -v $2 $1
	else
		echo "[Info] $1 has the correct permissions"
	fi
	## Test group and user permissions and assert them if they're wrong.
	if [ ! $($(stat -U $1):$(stat -G $1)) = $3 ]; then
		echo "[Warn] $1 was not owned by the correct: user:group $3"
		echo "[RUN] chown $1 $3"
		chown -v $3 $1
	else
		echo "[Info] $1 is owned by the correct user:group: $3"
	fi
}

## If directory doesn't exist create it and set group perms.
## Var $1 should be a directory.
## Var $2 should be your octal permissions for said directory.
## Var $3 should be your "user:group" names
function test_for_dir() {
	if [ ! -e '$1' ]; then
		## Check if directory is empty
		if [ "$(ls -A $1)" ]; then
			echo "[warn] $1 is not Empty. It contains:" 1>&2
			ls -A 1>&2
			test_perm $1 $2 $3
	fi
	else
		echo "[Info] Directory $1 was missing, creating directory and setting permissions."
		echo "[RUN] mkdir -pv $1"
		mkdir -pv $1
		test_perm $1 $2 $3
	fi
}

## This tests to see if a file exists and if it's permissions are correct or not.
## Then it attempts to assert that files permissions.
## Maybe add a test case to ensure that the file is critical or not.
function test_for_file() {
	if [ ! -f '$1' ]; then
		echo [Info] File $1 not found.
	else
		test_perm $1 $2 $3
	fi
}

function setup_conf() {
	if [ ! -z "$1" ]; then
		sed -i "s/$2/$$1/g" $3
	else
		echo "[Info] $$1 was not set leaving as default instead."
	fi
}

## Configure database.php
setup_conf '$DB_SERVER' DBCONF_SERVER /var/www/html/config/database.php
setup_conf '$DB_NAME' DBCONF_NAME /var/www/html/config/database.php
setup_conf '$DB_USERNAME' DBCONF_USERNAME /var/www/html/config/database.php
setup_conf '$DB_PASSWORD' DBCONF_PASSWORD /var/www/html/config/database.php

# if empty, copy apache2 configuration to volume
if [ ! "$(ls -A /etc/apache2)" ]; then
		echo "[Info] apache2 configuration dir was empty installing alternative."
		echo "[RUN] cp -r /usr/local/etc/apache2/* /etc/apache2"
		cp -r /usr/local/etc/apache2/* /etc/apache2
		echo "[Info] copied apache2 configuration directory"
fi

# if Concrete5 is not yet installed, copy it into web root.
# This could be updated to be part of an upgrade mechanism.
if [ ! -e '/var/www/html/config/concrete.php' ]; then
		if [ "$(ls -A /var/www/html)" ]; then
				echo "[warn] /var/www/html/ is not Empty. It contains:" 1>&2
				ls -A 1>&2
		fi

		echo "[Info] Concrete5 Version: ${C5_VERSION}"
		chown -R root:www-data /usr/local/src/concrete5-${C5_VERSION}/
		mv -r /usr/local/src/concrete5-${C5_VERSION}/* /var/www/html/

		# change required permissions incl. for multi-lingual sites
		test_for_dir /var/www/html/application/files/ "root:www-data"
		test_for_dir /var/www/html/application/config/ "root:www-data"
		test_for_dir /var/www/html/packages/ "root:www-data"
		test_for_dir /var/www/html/updates/ "root:www-data"
		test_for_dir /var/www/html/application/languages/ "root:www-data"
		test_for_dir /var/www/html/application/languages/site/ "root:www-data"

		echo "[Info] copied Concrete5 and set permissions"
fi

chown -R root:www-data /var/www/html
echo "[RUN] chmod -R 775 /var/www/html/packages"
chmod -R 775 /var/www/html/packages
echo "[RUN] chmod -R 775 /var/www/html/application/config"
chmod -R 775 /var/www/html/application/config

# else default to run whatever the user wanted like "bash"
exec "$@"
